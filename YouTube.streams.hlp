Help on StreamQuery in module pytube.query object:

class StreamQuery(collections.abc.Sequence)
 |  StreamQuery(fmt_streams)
 |  
 |  Interface for querying the available media streams.
 |  
 |  Method resolution order:
 |      StreamQuery
 |      collections.abc.Sequence
 |      collections.abc.Reversible
 |      collections.abc.Collection
 |      collections.abc.Sized
 |      collections.abc.Iterable
 |      collections.abc.Container
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getitem__(self, i: Union[slice, int])
 |  
 |  __init__(self, fmt_streams)
 |      Construct a :class:`StreamQuery <StreamQuery>`.
 |      
 |      param list fmt_streams:
 |          list of :class:`Stream <Stream>` instances.
 |  
 |  __len__(self) -> int
 |  
 |  __repr__(self) -> str
 |      Return repr(self).
 |  
 |  all(self) -> List[pytube.streams.Stream]
 |      Get all the results represented by this query as a list.
 |      
 |      :rtype: list
 |  
 |  asc(self) -> 'StreamQuery'
 |      Sort streams in ascending order.
 |      
 |      :rtype: :class:`StreamQuery <StreamQuery>`
 |  
 |  count(self, value: Optional[str] = None) -> int
 |      Get the count of items in the list.
 |      
 |      :rtype: int
 |  
 |  desc(self) -> 'StreamQuery'
 |      Sort streams in descending order.
 |      
 |      :rtype: :class:`StreamQuery <StreamQuery>`
 |  
 |  filter(self, fps=None, res=None, resolution=None, mime_type=None, type=None, subtype=None, file_extension=None, abr=None, bitrate=None, video_codec=None, audio_codec=None, only_audio=None, only_video=None, progressive=None, adaptive=None, is_dash=None, custom_filter_functions=None)
 |      Apply the given filtering criterion.
 |      
 |      :param fps:
 |          (optional) The frames per second.
 |      :type fps:
 |          int or None
 |      
 |      :param resolution:
 |          (optional) Alias to ``res``.
 |      :type res:
 |          str or None
 |      
 |      :param res:
 |          (optional) The video resolution.
 |      :type resolution:
 |          str or None
 |      
 |      :param mime_type:
 |          (optional) Two-part identifier for file formats and format contents
 |          composed of a "type", a "subtype".
 |      :type mime_type:
 |          str or None
 |      
 |      :param type:
 |          (optional) Type part of the ``mime_type`` (e.g.: audio, video).
 |      :type type:
 |          str or None
 |      
 |      :param subtype:
 |          (optional) Sub-type part of the ``mime_type`` (e.g.: mp4, mov).
 |      :type subtype:
 |          str or None
 |      
 |      :param file_extension:
 |          (optional) Alias to ``sub_type``.
 |      :type file_extension:
 |          str or None
 |      
 |      :param abr:
 |          (optional) Average bitrate (ABR) refers to the average amount of
 |          data transferred per unit of time (e.g.: 64kbps, 192kbps).
 |      :type abr:
 |          str or None
 |      
 |      :param bitrate:
 |          (optional) Alias to ``abr``.
 |      :type bitrate:
 |          str or None
 |      
 |      :param video_codec:
 |          (optional) Video compression format.
 |      :type video_codec:
 |          str or None
 |      
 |      :param audio_codec:
 |          (optional) Audio compression format.
 |      :type audio_codec:
 |          str or None
 |      
 |      :param bool progressive:
 |          Excludes adaptive streams (one file contains both audio and video
 |          tracks).
 |      
 |      :param bool adaptive:
 |          Excludes progressive streams (audio and video are on separate
 |          tracks).
 |      
 |      :param bool is_dash:
 |          Include/exclude dash streams.
 |      
 |      :param bool only_audio:
 |          Excludes streams with video tracks.
 |      
 |      :param bool only_video:
 |          Excludes streams with audio tracks.
 |      
 |      :param custom_filter_functions:
 |          (optional) Interface for defining complex filters without
 |          subclassing.
 |      :type custom_filter_functions:
 |          list or None
 |  
 |  first(self) -> Optional[pytube.streams.Stream]
 |      Get the first :class:`Stream <Stream>` in the results.
 |      
 |      :rtype: :class:`Stream <Stream>` or None
 |      :returns:
 |          the first result of this query or None if the result doesn't
 |          contain any streams.
 |  
 |  get_audio_only(self, subtype: str = 'mp4') -> Optional[pytube.streams.Stream]
 |      Get highest bitrate audio stream for given codec (defaults to mp4)
 |      
 |      :param str subtype:
 |          Audio subtype, defaults to mp4
 |      :rtype: :class:`Stream <Stream>` or None
 |      :returns:
 |          The :class:`Stream <Stream>` matching the given itag or None if
 |          not found.
 |  
 |  get_by_itag(self, itag: int) -> Optional[pytube.streams.Stream]
 |      Get the corresponding :class:`Stream <Stream>` for a given itag.
 |      
 |      :param int itag:
 |          YouTube format identifier code.
 |      :rtype: :class:`Stream <Stream>` or None
 |      :returns:
 |          The :class:`Stream <Stream>` matching the given itag or None if
 |          not found.
 |  
 |  get_by_resolution(self, resolution: str) -> Optional[pytube.streams.Stream]
 |      Get the corresponding :class:`Stream <Stream>` for a given resolution.
 |      
 |      Stream must be a progressive mp4.
 |      
 |      :param str resolution:
 |          Video resolution i.e. "720p", "480p", "360p", "240p", "144p"
 |      :rtype: :class:`Stream <Stream>` or None
 |      :returns:
 |          The :class:`Stream <Stream>` matching the given itag or None if
 |          not found.
 |  
 |  get_highest_resolution(self) -> Optional[pytube.streams.Stream]
 |      Get highest resolution stream that is a progressive video.
 |      
 |      :rtype: :class:`Stream <Stream>` or None
 |      :returns:
 |          The :class:`Stream <Stream>` matching the given itag or None if
 |          not found.
 |  
 |  get_lowest_resolution(self) -> Optional[pytube.streams.Stream]
 |      Get lowest resolution stream that is a progressive mp4.
 |      
 |      :rtype: :class:`Stream <Stream>` or None
 |      :returns:
 |          The :class:`Stream <Stream>` matching the given itag or None if
 |          not found.
 |  
 |  last(self)
 |      Get the last :class:`Stream <Stream>` in the results.
 |      
 |      :rtype: :class:`Stream <Stream>` or None
 |      :returns:
 |          Return the last result of this query or None if the result
 |          doesn't contain any streams.
 |  
 |  order_by(self, attribute_name: str) -> 'StreamQuery'
 |      Apply a sort order. Filters out stream the do not have the attribute.
 |      
 |      :param str attribute_name:
 |          The name of the attribute to sort by.
 |  
 |  otf(self, is_otf: bool = False) -> 'StreamQuery'
 |      Filter stream by OTF, useful if some streams have 404 URLs
 |      
 |      :param bool is_otf: Set to False to retrieve only non-OTF streams
 |      :rtype: :class:`StreamQuery <StreamQuery>`
 |      :returns: A StreamQuery object with otf filtered streams
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from collections.abc.Sequence:
 |  
 |  __contains__(self, value)
 |  
 |  __iter__(self)
 |  
 |  __reversed__(self)
 |  
 |  index(self, value, start=0, stop=None)
 |      S.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
 |      
 |      Supporting start and stop arguments is optional, but
 |      recommended.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from collections.abc.Reversible:
 |  
 |  __subclasshook__(C) from abc.ABCMeta
 |      Abstract classes can override this to customize issubclass().
 |      
 |      This is invoked early on by abc.ABCMeta.__subclasscheck__().
 |      It should return True, False or NotImplemented.  If it returns
 |      NotImplemented, the normal algorithm is used.  Otherwise, it
 |      overrides the normal algorithm (and the outcome is cached).
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from collections.abc.Iterable:
 |  
 |  __class_getitem__ = GenericAlias(...) from abc.ABCMeta
 |      Represent a PEP 585 generic type
 |      
 |      E.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,).
